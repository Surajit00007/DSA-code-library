 Question-1: Write a Java program that can take a positive integer greater than 2 as input and write out the number of times one must repeatedly divide this number by 2 before getting a value less than 2.
Solution:  import java.util.*;

public class Q1 {

	public static void main(String[] args) {

		Scanner sc=new Scanner(System.in);

		System.out.println("Enter a number ");

		int n=sc.nextInt();

		int c=0;

		while(n>2)

		{	n=n/2;

			c++;

		}

                          System.out.println("No of times "+c);

	}

}

Question-2: The body mass index (BMI) is commonly used by health and nutrition professionals to estimate human body fat in populations. It is computed by taking the individual's weight (mass) in kilograms and dividing it by the square of their height in meters. i.e. Metric: BMI = 𝑾𝒆𝒊𝒈𝒉𝒕 (𝒌𝒈) (𝑯𝒆𝒊𝒈𝒉𝒕)𝟐 (𝒎𝟐) Write a Java program by using a conditional statement to show the category for a given BMI. 
 Category                                BMI
 Less than 18.5                        Underweight 
18.5 to 24.9                             Normal Weight 
 25.0 to 29.9                           Overweight
 30.0 or more                          Obese 
Solution: import java.util.*;

public class Q2 {

	public static void main(String[] args) {

          Scanner sc=new Scanner(System.in);

          System.out.println("Enter your weight in kg: ");

          double weight=sc.nextDouble();

          System.out.println("Enter your height(in metres)");

          double height=sc.nextDouble();

          double bmi=weight/(Math.pow(height,2));

          System.out.println("BMI:"+bmi);

          if(bmi<18.5)

          {

        	 System.out.println(" Underweight "); 

          }

          else if(bmi>=18.5 && bmi<=24.9)

          {

        	  System.out.println(" Normal weight "); 

          }

          else if(bmi>=25.0 && bmi<=29.9)

          {

        	  System.out.println("Overweight ");

          }

          else if(bmi>=30.0)

          {

        	  System.out.println("Obese ");

          }

          else

        	  System.out.println("Invalid input ");

	}

} 


Question-3: Write a java program to check whether a number is a spy number or not.  
Solution:  import java.util.*;

public class Q3 {

	public static void main(String[] args) {

        Scanner sc=new Scanner(System.in);

        System.out.println("Enter a number ");

        int n=sc.nextInt(); 

        int r ,int n1=n;

		while(n!=0)

        {              r=n%10;

			sum+=r;

			product*=r;

			n=n/10;

	    }

	

		if(sum==product)

		{

		System.out.println("The number "+n1+" is spy number ");

		}

		else

		System.out.println("The number "+n1+" is not a spy number ");

	}

}

Question-4: Write a Java program that outputs all possible strings formed by using the characters 'c', 'a', 'r', 'b', 'o', and 'n' exactly once.
Solution: public class Q4 

{

    public static void main(String[] args)

    {

        char ch[] = {'c', 'a', 'r'};

        for (int i = 0; i < ch.length; i++)

        {

            for (int j = 0; j < ch.length; j++) 

            {

                for (int k = 0; k < ch.length; k++)

                {

                    if (i != j && j != k && i != k)

                    {

                        System.out.println(ch[i] + "" + ch[j] + "" + ch[k]);

                    }

                }

            }

        }

    }

}

Question-5: Write a java method to calculate the sum of digits of a given number until the number is a single digit. The method signature is as follows. public static int sum_Of_Digits(int n) 
Solution: import java.util.*;

public class Q5 {

	public static void main(String[] args) {

        Scanner sc=new Scanner(System.in);

        System.out.println("Enter a number");

        int no=sc.nextInt();

 System.out.println("Sum of number untill it becomes single digit "+sumofdigits(no));

        }

    public static int sumofdigits(int n)

    {

    	int sum = 0;

        while (n>0|| sum>9) 

        {

            if (n == 0) {

                n = sum;

                sum = 0;

            }

            sum += n% 10;

            n=n/10;

        }

        return sum;

    }

 }

Question-6: Write a Java method, isOdd( ), that takes an int i and returns true if and only if i is odd. Your method can't use the multiplication, modulus, or division operators, The method signature is as follows. public static boolean isOdd(int n) 
Solution: import java.util.*;

          public class Q6 {

	  public static void main(String[] args) {

		Scanner sc=new Scanner(System.in);

		System.out.println("Enter a number ");

		int n1=sc.nextInt();

		if(isOdd(n1))

			{System.out.println("The number is odd");}

		else

			{System.out.println("The number is even ");}

	}

	public static boolean isOdd(int n)

	{

	  while(n>0)

		{  n=n-2;

		   if(n==1)

		  { break; }

		}

	  if(n==1) return true;

	  else if(n==-1) return true;

	  else return false;

	}


}

Alternate solution:

import java.util.*;

public class Q6 {



	public static void main(String[] args) {

		Scanner sc=new Scanner(System.in);

		System.out.println("Enter a number ");

		int n1=sc.nextInt();

		System.out.println(n1+" is odd: "+isOdd(n1));

		}

	public static boolean isOdd(int n)

	{

	 return (n&1)!=0;

		

	}


}

Question-7: Write a Java program to find the maximum and minimum and how many times they both occur in an array of n elements. Find out the positions where the maximum first occurs and the minimum last occurs.  

Sample Run: Enter number of elements of Array: 5 Enter elements of the array: 12 14 12 14 13 Maximum element of Array is 14 and occurs 2 times. Minimum element of Array is 12 and occurs 2 times. First occurrence of maximum element is at position 2. Last occurrence of minimum element is at position 3.

Solution:  import java. util.*;

public class Q7 {

	public static void main(String[] args) {

       Scanner sc=new Scanner(System.in);

       System.out.print("Enter the number of elements of array ");

       int n=sc.nextInt();

       int arr[]=new int[n];

       for(int i=0 ;i<n;i++)

       {

    	   arr[i]=sc.nextInt();

       }

       System.out.print("Elemts of the array:");

       for(int i=0 ;i<n;i++)

       {

    	   System.out.print(arr[i]+" ");

       }

       int max,min,c1=0,c2=0,p1=0,p2=0;

       max=arr[0];

       min=arr[0];

       for(int i=1;i<n;i++)

       {

    	   if(arr[i]>max)

    	   {

    		   max=arr[i];

    	   }

    	   else if(arr[i]<min)

    	   {

    		   min=arr[i];

    	   }

       }

       for(int i=0;i<n;i++)

       {

    	   if(max==arr[i])

    	   {   c1++;

    	       if(c1==1)

    	       {p1=i+1;}

    	   }

    	   else if(min==arr[i])

    	   { c2++;

    	     p2=i+1;

    	   }

       }

       System.out.println("\nMaxmimum element "+max+" occurs "+c1+" times \nMin element " +min+" occurs "+c2+" times");

       System.out.println("First occurrence of maximum element is at position "+p1+" \nLast occurrence of minimum element is at position "+p2);

	}

}

 Question-8: Write a Java program to print an M-by-N array in the tabular format. Also, display the sum of elements of the array. 
Solution: import java.util.*;
public class Q8 {

	public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter no of row of 2D array: ");
        int rows =sc.nextInt();
        System.out.print("Enter no of & columns of 2D array: ");
        int columns=sc.nextInt();
        int arr[][]=new int[rows][columns];
        for(int i=0;i<rows;i++) 
        {
        	for(int j=0;j<columns;j++)
        	{
        		arr[i][j]=sc.nextInt();
        	}	
        }
        System.out.println("The 2D array is:");
        for(int i=0;i<rows;i++) 
        {
        	for(int j=0;j<columns;j++)
        	{
        		System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
        int sum=0;
        for (int i = 0; i < rows; i++) 
        {
            for (int j = 0; j < columns; j++) 
            {
                sum += arr[i][j];
            }
        }
        System.out.println("\nThe sum of elements of the 2D array is " + sum);
    }
}
Question-9: Write a method that sums all the numbers in the major diagonal in an n * n matrix of double values using the following header: public static double sumMajorDiagonal(double[][] m) 
 Write a java program that reads a 4-by-4 matrix and displays the sum of all its elements on the major diagonal. 
Solution: import java.util.*;

public class Q9{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] matrix = new double[4][4];
        System.out.println("Enter the elements of the 4-by-4 matrix:");

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[i][j] = sc.nextDouble();
            }
        }

        double diagonalSum = sumMajorDiagonal(matrix);
        // Display the matrix and the diagonal sum
        System.out.println("\nThe elements of the 4-by-4 matrix are:");
        printMatrix(matrix);
        System.out.println("\nThe sum of the major diagonal elements is: " + diagonalSum);
        sc.close();
    }

    public static double sumMajorDiagonal(double[][] m) {
        double sum = 0.0;
        for (int i = 0; i <m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }
    public static void printMatrix(double[][] m) {
    	System.out.println("The Matrix is :");
        for(int i=0;i<m.length;i++) 
        {
        	for(int j=0;j<m.length;j++)
        	{
        		System.out.print(m[i][j] + " ");
            }
            System.out.println();
        }
    }
}
Question-10: Write a method that returns the sum of all the elements in a specified column in a matrix using the following header: public static double sumColumn(double[][] m, int columnIndex) 
 Write a java program that reads a 3-by-4 matrix and displays the sum of each column. 
Solution: 
import java.util.*;
public class Q10{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] matrix = new double[3][4];
        System.out.println("Enter the elements of the 3-by-4 matrix:");

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[i][j] = sc.nextDouble();
            }
        }
        System.out.println("\nThe elements of the 3-by-4 matrix are:");
        printMatrix(matrix);
        System.out.println("Enter the column you want sum :");
        int col=sc.nextInt();
        System.out.println("Sum of Column "+col+" is : "+sumColumn(matrix,col-1));
        // Calculate and display the sum of each column
        for (int j = 1; j <=4; j++) {
            double columnSum = sumColumn(matrix,j-1);
            System.out.println("Sum of column " + j + ": " + columnSum);
        }
        sc.close();
    }

    // Method to compute the sum of a specified column
    public static double sumColumn(double[][] m, int columnIndex) {
        double sum = 0.0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][columnIndex];
        }
        return sum;
    }
    public static void printMatrix(double[][] m) {
    	System.out.println("The Matrix is :");
        for(int i=0;i<3;i++) 
        {
        	for(int j=0;j<4;j++)
        	{
        		System.out.print(m[i][j] + " ");
            }
            System.out.println();
        }
    }
}
Output:
Enter the elements of the 3-by-4 matrix:
1
2
3
4
5
6
7
8
9
10
11
12

The elements of the 3-by-4 matrix are:
The Matrix is :
1.0 2.0 3.0 4.0 
5.0 6.0 7.0 8.0 
9.0 10.0 11.0 12.0 
Enter the column you want sum :
1
Sum of Column 1 is : 15.0
Sum of column 1: 15.0
Sum of column 2: 18.0
Sum of column 3: 21.0
Sum of column 4: 24.0

